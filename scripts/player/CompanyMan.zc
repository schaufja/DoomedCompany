#include "scripts/items/DC_BaseItem.zc"

Class CompanyMan : DoomPlayer
{
	int staminaRegenCounter;
	const STAMINA_REGEN_RATE = 4; //how many ticks it takes before regenerating a point of stamina
	int regenDelayCounter;
	const STAMINA_DELAY = 60; //how many ticks before starting to regenerate stamina
	int staminaDrainCounter;
	const STAMINA_DRAIN_RATE = 2; //how many ticks before draining a stamina point while sprinting
	bool batteryDrain;

	const JUMP_DELAY = 10;

	//inventory
	array <ItemData> inventory;
	int inventorySlots;
	int selectedItem;
	int activeIndex;
	int currentWeight;
	double doubleWeight;
	double weightSpeedFactor;
	bool handsFull;

	string handSprite;

	//interface
	string toolTip;
	int toolTipTimer;
	int itemCycleDelay;
	CONST BASE_CYCLE_DELAY = 4;

	//misc func stuff
	bool allFlashlightState;
	int lightScale;
	int deathBeamChargeLevel;
	const DEATHBEAM_MAX_CHARGE = 140.0;

	Default
	{
		Player.ForwardMove 0.5,0.25;
		Player.SideMove 0.5,0.25;
		Player.ViewBob 0.2;
		Player.StartItem "DC_StaminaToken", 100;
		Player.StartItem "DC_BatteryToken", 100;
		Player.StartItem "DC_Hands";
	}
	
	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();
		batteryDrain = false;
		inventorySlots = 4;
		selectedItem = 0;
		activeIndex = -1;
		toolTip = "";
		toolTipTimer = 0;
		itemCycleDelay = 0;
		allFlashlightState = false;
		lightScale = 1.0;
		deathBeamChargeLevel = 0;

		SetupInventory();
	}

	override void Tick(void)
	{
		Super.Tick();

		activeIndex = GetActiveIndex();

		if((activeIndex != -1) && (inventory[activeIndex].itemType == ItemTypes.FLASHLIGHT))
		{
			
			A_AttachLight("PlayerFlashlight", DynamicLight.PointLight, color(255, 255, 242, 203), 320 * lightScale, 64 * lightScale, DYNAMICLIGHT.LF_DONTLIGHTSELF | DYNAMICLIGHT.LF_ATTENUATE | DYNAMICLIGHT.LF_SPOT, (0, 0, 41), 2.0, 8, 32, pitch);
			//if all four items are active flashlights, create a death beam to harm bracken
		}
		else
		{
			A_RemoveLight("PlayerFlashlight");
		}

		handSprite = inventory[selectedItem].handSprite;

		DoSprint();

		DoBatteryDrain();

		DoRecharge();

		UpdateWeight();

		DoHeavy();

		DoToolTip();

		itemCycleDelay--;
	}

	override void CheckJump()
	{
		let player = self.player;
		//if we're pressing jump, and we were on the ground, and we have no jumpTics, we're at the start of a fresh jump
		if(CountInv("DC_StaminaToken") > 0 && player.cmd.buttons & BT_JUMP && player.onground && player.jumpTics == 0)
		{
			//Call Super.CheckJump to execute a regular jump
			Super.CheckJump();
			if(weightSpeedFactor < 0.2)
			{
				TakeInventory("DC_StaminaToken", 30);
			}
			else if(weightSpeedFactor < 0.4)
			{
				TakeInventory("DC_StaminaToken", 20);
			}
			else
			{
				TakeInventory("DC_StaminaToken", 15);
			}

			if(CountInv("DC_StaminaToken") == 0)
			{
				regenDelayCounter = STAMINA_DELAY;
			}
			else
			{
				regenDelayCounter = 18;
			}
		}
		
		
	}

	void SetupInventory(void)
	{
		if (inventory.Size() == 0)
		{
			for(int i = 0; i < inventorySlots; i++)
			{
				let empty = new("ItemData");
				inventory.Push(empty);
			}
		}

		for(int i = 0; i < inventorySlots; i++)
		{
			RemoveItem(i);
		}
	}

	bool AddItem(ItemData item)
	{
		//If our hands are full, we can't add any items.
		if(handsFull)
		{
			Tooltip_HandsFull();
			return false;
		}

		let emptySlot = GetEmptyInventorySlot();
		if(emptySlot != -1)
		{
			inventory[emptySlot].name = item.name;
			inventory[emptySlot].weight = item.weight;
			inventory[emptySlot].value = item.value;
			inventory[emptySlot].spriteName = item.spriteName;
			inventory[emptySlot].className = item.className;

			inventory[emptySlot].batteryCharge = item.batteryCharge;
			inventory[emptySlot].batteryMax = item.batteryMax;
			inventory[emptySlot].isActive = item.isActive;
			inventory[emptySlot].itemType = item.itemType;

			inventory[emptySlot].handSprite = item.handSprite;
			inventory[emptySlot].handSpriteScale = item.handSpriteScale;

			inventory[emptySlot].soundName = item.soundName;

			if(inventory[emptySlot].handSprite == "TNT1A")
			{
				selectedItem = emptySlot;
			}

			if(inventory[emptySlot].itemType == ItemTypes.NOISY && emptySlot == selectedItem)
			{
				PlayItemSound(inventory[emptySlot].soundName);
			}

			return true;
		}

		return false;
	}

	bool RemoveItem(int itemIndex)
	{
		if(itemIndex != -1)
		{
			let empty = new("ItemData");
			
			empty.name = "";
			empty.weight = 0;
			empty.value = 0;
			empty.spriteName = "TNT1";
			empty.className = "";

			empty.batteryCharge = -1;
			empty.batteryMax = -1;
			empty.isActive = false;
			empty.itemType = ItemTypes.NONE;
			
			empty.handSprite = "PUNGA";
			empty.handSpriteScale = 1.0;

			empty.soundName = "";

			inventory[itemIndex] = empty;

			return true;
		}

		return false;
	}

	int GetEmptyInventorySlot()
	{
		for(int i = 0; i < inventory.Size(); i++)
		{
			if(inventory[i] && inventory[i].name == "")
			{
				return i;
			}
		}
		
		return -1;
	}

	void NextItem(void)
	{
		if(handsFull || itemCycleDelay > 0)
		{
			return;
		}

		if(selectedItem == 0)
		{
			selectedItem = inventorySlots - 1;
		}
		else
		{
			selectedItem--;
		}

		itemCycleDelay = BASE_CYCLE_DELAY;

		if(inventory[selectedItem].itemType == ItemTypes.NOISY)
		{
			PlayItemSound(inventory[selectedItem].soundName);
		}
	}

	void PrevItem(void)
	{
		if(handsFull || itemCycleDelay > 0)
		{
			return;
		}

		if(selectedItem == inventorySlots - 1)
		{
			selectedItem = 0;
		}
		else
		{
			selectedItem++;
		}

		itemCycleDelay = BASE_CYCLE_DELAY;

		if(inventory[selectedItem].itemType == ItemTypes.NOISY)
		{
			PlayItemSound(inventory[selectedItem].soundName);
		}
	}

	void ToggleItemActive(void)
	{
		int itemType = inventory[selectedItem].itemType;
		if(itemType == ItemTypes.JUNK || itemType == ItemTypes.NOISY)
		{
			return;
		}

		if(itemType == ItemTypes.FLASHLIGHT)
		{
			PlayItemSound(inventory[selectedItem].soundName);
		}

		let oldActive = inventory[selectedItem].isActive;
		inventory[selectedItem].isActive = !oldActive;
		//console.printf("isActive: %d",inventory[selectedItem].isActive);
	}

	int GetActiveIndex(void)
	{
		for(int i = 0; i < inventory.Size(); i++)
		{
			//bool isFlashlight = inventory[i].itemType == ItemTypes.FLASHLIGHT;
			bool isActive = inventory[i].isActive;
			bool hasBatteryCharge = inventory[i].batteryCharge > 0;

			if(isActive && hasBatteryCharge)
			{
				return i;
			}
		}

		return -1;
	}

	void DoSprint(void)
	{
		if((GetPlayerInput(INPUT_BUTTONS) & BT_SPEED) && CountInv("DC_StaminaToken") > 0)
		{
			if (staminaDrainCounter >= STAMINA_DRAIN_RATE)
			{
				if(weightSpeedFactor < 0.4)
				{
					TakeInventory("DC_StaminaToken", 2);
				}
				else
				{
					TakeInventory("DC_StaminaToken", 1);
				}
				staminaDrainCounter = 0;
			}
			
			if (CountInv("DC_StaminaToken") > 0)
			{
				Speed = 2.0 * weightSpeedFactor;
			}
			staminaDrainCounter++;
		}
		else if((GetPlayerInput(INPUT_BUTTONS) & BT_SPEED) && CountInv("DC_StaminaToken") == 0)
		{
			Speed = 1.0 * weightSpeedFactor;
			//draining all your stamina adds a regeneration delay
			regenDelayCounter = STAMINA_DELAY;
		}
		else
		{
			Speed = 1.0 * weightSpeedFactor;
			//if we have less than max stamina, and we have no delay before regeneration
			if (CountInv("DC_StaminaToken") < 100 && regenDelayCounter == 0)
			{
				staminaRegenCounter++;
				if (staminaRegenCounter == STAMINA_REGEN_RATE)
				{
					GiveInventory("DC_StaminaToken", 1);
					staminaRegenCounter = 0;
				}
			}
			else if(regenDelayCounter > 0)
			{
				regenDelayCounter--;
			}
		}
	}

	void DoBatteryDrain(void)
	{
		int numProFlashlight = 0;
		

		for(int i = 0; i < inventory.Size(); i++)
		{
			if(inventory[i].batteryCharge > 0 && inventory[i].isActive)
			{
				inventory[i].batteryCharge--;
			}

			if(inventory[i].name == "Pro Flashlight" && inventory[i].isActive && inventory[i].batteryCharge > 0)
			{
				numProFlashlight++;
			}
		}

		if(numProFlashlight == inventory.Size())
		{
			deathBeamChargeLevel++;

			double soundFactor = (deathBeamChargeLevel / DEATHBEAM_MAX_CHARGE) * 2.0;
			double quakeFactor = soundFactor * 2.0;

			if(deathBeamChargeLevel % 35 == 0)
			{
				//console.printf("%f / %f = %f", deathBeamChargeLevel, DEATHBEAM_MAX_CHARGE, soundFactor);
				A_StartSound("items/flashlightcharge", CHAN_WEAPON, volume: soundFactor);
				A_QuakeEx( quakeFactor, quakeFactor, quakeFactor, 60, 0, quakeFactor * 25.0, sfx: "" );
			}
			if(deathBeamChargeLevel >= DEATHBEAM_MAX_CHARGE)
			{
				FireDeathBeam();
			}
		}
		else
		{
			deathBeamChargeLevel = 0;
		}
	}

	void FireDeathBeam(void)
	{
		A_StartSound("items/deathbeam", CHAN_WEAPON, volume: 2.0);
		deathBeamChargeLevel = 0;

		double heightOffset = ViewHeight - 12;
		double cp = cos(pitch);
		double distanceOffset = 32;
		double missileSpeed = 10;

		for(int i = 0; i < inventory.Size(); i++)
		{
			inventory[i].batteryCharge = 0;

			Actor missile = Actor.Spawn("FlashlightShot", pos + (cp * distanceOffset * cos(angle), cp * distanceOffset * sin(angle), distanceOffset * sin(pitch) + heightOffset), ALLOW_REPLACE);
			missile.angle = angle;
			missile.pitch = pitch;
			missile.vel = (
				cp * missileSpeed * cos(missile.angle),
				cp * missileSpeed * sin(missile.angle),
				1.5 * missileSpeed * -sin(pitch)
			);
		}

		missileSpeed = 5;

		RemoveItem(selectedItem);

		Actor missile = Actor.Spawn("FlashlightHusk", pos + (cp * distanceOffset * cos(angle), cp * distanceOffset * sin(angle), distanceOffset * sin(pitch) + heightOffset), ALLOW_REPLACE);
		missile.angle = angle;
		missile.pitch = pitch;
		missile.vel = (
			cp * missileSpeed * cos(missile.angle),
			cp * missileSpeed * sin(missile.angle),
			1.5 * missileSpeed * -sin(pitch)
		);

		A_DamageSelf(random(0,35));
	}

	void DoRecharge(void)
	{
		if(CountInv("DC_RechargeToken") > 0)
		{
			inventory[selectedItem].batteryCharge = inventory[selectedItem].batteryMax;
			inventory[selectedItem].isActive = false;
			TakeInventory("DC_RechargeToken", 1);
		}
	}

	void UpdateWeight(void)
	{
		int totalWeight = 0;
		for(int i = 0; i < inventory.Size(); i++)
		{
			totalWeight += inventory[i].weight;
		}

		currentWeight = totalWeight;

		//calculate weight speed factor
		weightSpeedFactor = 1/(0.025 * currentWeight + 1.0);
		//console.printf("weightSpeedFactor: %.2f", weightSpeedFactor);

	}

	string GetItemHandSprite(void)
	{
		if (inventory.Size() > 0)
		{
			return inventory[selectedItem].handSprite;
		}
		return "PUNGA";
	}

	void DoHeavy(void)
	{
		if(inventory[selectedItem].handSprite == "TNT1A")
		{
			handsFull = true;
			GiveInventory("DC_HandsfullToken", 1);
		}
		else
		{
			handsFull = false;
			TakeInventory("DC_HandsfullToken", 1);
		}
	}

	void DoToolTip(void)
	{
		// Create the tracer
		let tracer = new("MyLineTracer");
		if (!tracer)
			return;

		// Get the current direction the player is looking
		Vector3 dir = (AngleToVector(angle, cos(pitch)), -sin(pitch));

		// Set the starting point to the player's position + 3/4 their height
		Vector3 start = pos + (0,0,height*3/4);

		tracer.Source = self;

		tracer.Trace(start, CurSector, dir, self.UseRange, 0);
		if(tracer.FoundItem)
		{
			DC_BaseItem item = tracer.FoundItem;
			Tooltip_Pickup(item.itemData.name);
		}


		if(CountInv("DC_HandsfullTooltipToken") > 0)
		{
			Tooltip_HandsFull();
			TakeInventory("DC_HandsfullTooltipToken", 1);
		}
		if(toolTip == "")
		{
			return;
		}

		if(toolTipTimer > 0)
		{
			toolTipTimer--;
		}
		else
		{
			toolTip = "";
		}
	}

	void PlayItemSound(string soundName)
	{
		if(soundName != "")
		{
			A_StartSound(soundName, CHAN_AUTO, volume: 0.8);
		}
	}

	//tooltip functions
	void Tooltip_HandsFull(void)
	{
		toolTip = "Hands Full";
		toolTipTimer = 70;
	}

	void Tooltip_Pickup(string itemName)
	{
		int key1;
        int key2;

		[key1, key2] = Bindings.getKeysForCommand("+use");
		String useKey = KeyBindings.NameKeys(key1, 0);

		toolTip = "Pick Up " .. itemName .. " [" .. useKey .. "]";
		toolTipTimer = 1;
	}
	
}

class MyLineTracer : LineTracer
{
	Actor Source;
	DC_BaseItem FoundItem;

	override ETraceStatus TraceCallback()
	{
		if (Results.HitType == TRACE_HitActor)
		{
			// Ignore source
			if (Results.HitActor == Source)
			{
				return TRACE_Skip;
			}

			if (Results.HitActor is "DC_BaseItem")
			{
				FoundItem = DC_BaseItem(Results.HitActor);
				return TRACE_Stop;
			}
			return TRACE_Skip;
		}
		return TRACE_Stop;
	}
}
