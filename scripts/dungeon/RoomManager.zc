const MEMORYLIFE = 105;

Class RoomDoor
{
    Line doorLine;
    DoorHelper doorHelper;
    RoomManager otherRoom;
    bool isInUse;
    int doorID;
}

Class RoomMemory
{
    Actor memoryActor;
    int mapTimeSeen;
}

Class RoomManager : Actor
{
    int roomID;
    string user_DoorIDs; //Editor defined
    float user_RoomRadius; //Editor defined
    array <int> doorIDs;
    array <RoomDoor> doors;
    bool readyForGen;
    array <RoomMemory> memories;

    Default
    {
        
    }

    override void PostBeginPlay(void)
    {

    }

    override void Tick(void)
    {
        Super.Tick();

        
        //UpdateMemories();

        ClearOldMemories();

        if(CVar.GetCVar("DC_DEBUGMODE"))
        {
            if(memories.Size() > 0 && level.time % 70 == 0)
            {
                console.printf("I am RoomManager %d and I remember seeing %d entities", roomID, memories.Size());
            }
        }
    }

    int GetMemoryIndex(Actor actor)
    {
        for(int i = 0; i < memories.Size(); i++)
        {
            if(memories[i].memoryActor == actor)
            {
                return i;
            }
        }
        return -1;
    }

    void UpdateMemory(Actor memActor)
    {
        int memoryIndex = GetMemoryIndex(memActor);

        //Handle updating memory if we have one
        if(memoryIndex != -1)
        {
            memories[memoryIndex].mapTimeSeen = level.time;
        }
        //Add a new memory
        else
        {
            RoomMemory newSight = new("RoomMemory");
            newSight.memoryActor = memActor;
            newSight.mapTimeSeen = level.time;
            memories.Push(newSight);
        }
    }

    void UpdateMemories(void)
    {
        //Debug variables
        int updateCount, newCount;

        Actor a;
        let iterator = ThinkerIterator.Create("Actor");

        while (a = Actor(iterator.Next()))
        {
            if((a is "CompanyMan") || (a is "DC_BaseMonster"))
            {
                console.printf("distance from RoomManager %d to %s is %.1f", roomID, a.GetClassName(), Distance2D(a));
                if(Distance2D(a) < user_RoomRadius)
                {
                    int memoryIndex = GetMemoryIndex(a);

                    //Handle updating memory if we have one
                    if(memoryIndex != -1)
                    {
                        memories[memoryIndex].mapTimeSeen = level.time;
                        updateCount++;
                    }
                    //Add a new memory
                    else
                    {
                        RoomMemory newSight = new("RoomMemory");
                        newSight.memoryActor = a;
                        newSight.mapTimeSeen = level.time;
                        memories.Push(newSight);
                        newCount++;
                    }
                }
            }
        }

        if(CVar.GetCVar("DC_DEBUGMODE"))
        {
            //console.printf("Updated %d memories \nAdded %d new memories", updateCount, newCount);
        }

    }

    void ClearOldMemories(void)
    {
        for(int i = 0; i < memories.Size(); i++)
        {
            if(level.time - memories[i].mapTimeSeen > MEMORYLIFE)
            {
                //console.printf("Forgetting %s", memories[i].memoryActor.player.GetUserName());
                memories.Delete(i);
            }
        }
    }

    bool Setup (int newID)
    {
        if(user_DoorIDs != "")
        {
            SplitUserString(user_DoorIDs);
            user_DoorIDs = "";
            for(int i = 0; i < doorIDs.Size(); i++)
            {
                AddDoor(doorIDs[i]);
            }

            roomID = newID;

            if(CVar.GetCVar("DC_DEBUGMODE"))
            {
                console.printf("RoomManager %d ready for generation with %d doors", roomID, doors.Size());
            }

            readyForGen = true;
            return true;
        }
        return false;
    }

    //Make a connection to a new or existing RoomManager
    //Add RoomManager to siblings
    bool MakeNewConnection(RoomManager otherRoomManager)
    {
        //Get door to connect to
        console.printf("otherRoomManager (%.1f,%.1f,%.1f)", otherRoomManager.pos.x, otherRoomManager.pos.y, otherRoomManager.pos.z);
        int otherDoorIndex = otherRoomManager.GetRandomUnusedDoorIndex();
        if(CVar.GetCVar("DC_DEBUGMODE"))
        {
            console.printf("Selected other door index %d", otherDoorIndex);
        }
        if (otherDoorIndex == -1)
        {
            return false;
        }
        
        //Get door to connect from
        int myDoorIndex = GetRandomUnusedDoorIndex();
        if (myDoorIndex == -1)
        {
            return false;
        }
        RoomDoor myDoor = doors[myDoorIndex];
        if(CVar.GetCVar("DC_DEBUGMODE"))
        {
            console.printf("Selected my door index %d", myDoorIndex);
        }
        
        RoomDoor otherDoor = otherRoomManager.doors[otherDoorIndex];

        //For monster helper
        myDoor.otherRoom = otherRoomManager;
        otherDoor.otherRoom = self;
        
        //Create the LinePortal
        console.printf("ids: %d, %d", myDoor.doorID, otherDoor.doorID);
        
        ACS_NamedExecuteAlways("SetupLinePortal", 0, myDoor.doorID, otherDoor.doorID);
        OpenDoor(myDoor);
        OpenDoor(otherDoor);
        myDoor.isInUse = true;
        otherDoor.isInUse = true;
        return true;
    }


    void SplitUserString(string inDoorIDs)
    {
        array <string> splitIDs;
        inDoorIDs.Split(splitIDs, ",");
        //console.printf("splitIDs.Size()", splitIDs);
        for (int i = 0; i < splitIDs.Size(); i++)
        {
            //console.printf("%d", splitIDs[i]);
            doorIDs.Push(splitIDs[i].ToInt());
        }
    }

    //Add new linedef as RoomDoor to doors array
    void AddDoor(int inID)
    {
        LineIdIterator iterator = Level.CreateLineIdIterator(inID);
        array <int> output;
		int currentIndex = 0;
        int doorHelperOffset = 24;
		while(true) {
			currentIndex = iterator.Next();
			if(currentIndex == -1) break;
			output.Push(currentIndex);
		}
        
        //create RoomDoor and assign linedef reference by ID
        RoomDoor newDoor = new("RoomDoor");
        newDoor.doorLine = Level.Lines[output[0]];
        //Set to blocked by default
        newDoor.doorLine.sidedef[Line.front].SetTexture(Side.mid, TexMan.CheckForTexture("BRICK1", TexMan.Type_Any, TexMan.TryAny));
        newDoor.doorLine.flags += (Line.ML_BLOCKING);
        newDoor.isInUse = false;
        newDoor.doorID = inID;

        Vector3 doorCenter = Geometry.GetLineMidPoint(newDoor.doorLine);
        
        double lineAngle = Geometry.GetLineAngle(newDoor.doorLine);
        
        Vector3 offsetPoint = doorCenter + (doorHelperOffset * cos(lineAngle) * -1, doorHelperOffset * sin(lineAngle) * -1, 0);
        
        //console.printf("doorCenter: (%.1f,%.1f,%.1f) \nangle: %.1f \noffsetPoint: (%.1f,%.1f,%.1f)", doorCenter.x, doorCenter.y, doorCenter.z, lineAngle, offsetPoint.x, offsetPoint.y, offsetPoint.z);

        newDoor.doorHelper = DoorHelper(Actor.Spawn("DoorHelper", offsetPoint));
        
        doors.Push(newDoor);
    }

    void OpenDoor(RoomDoor inDoor)
    {
        inDoor.doorLine.sidedef[Line.front].SetTexture(Side.mid, TexMan.CheckForTexture("", TexMan.Type_Any, TexMan.TryAny));
        inDoor.doorLine.flags -= (Line.ML_BLOCKING);
    }

    //Searches doors for one with a matching room manager
    int GetDoorIndexByNeighbor(RoomManager otherRoomManager)
    {
        for(int i = 0; i < doors.Size(); i++)
        {
            if(doors[i].otherRoom == otherRoomManager)
            {
                return i;
            }
        }
        return -1;
    }

    //Searches doors for one with a matching memory of a target
    int GetDoorIndexByNearbyActor(Actor inActor)
    {
        for(int i = 0; i < doors.Size(); i++)
        {
            if(doors[i].isInUse)
            {
                if(doors[i].otherRoom.GetMemoryIndex(inActor) != -1)
                {
                    return i;
                }
            }
        }
        return -1;
    }

    int GetFirstUnusedDoorIndex(void)
    {
        for (int i = 0; i < doors.Size(); i++)
        {
            if(doors[i].isInUse == false)
            {
                return i;
            }
        }
        return -1;
    }

    int GetRandomUnusedDoorIndex(void)
    {
        array <int> doorIndexes;
        for (int i = 0; i < doors.Size(); i++)
        {
            //console.printf("doors[%d].isInUse: %d", i, doors[i].isInUse);
            if(!doors[i].isInUse)
            {
                doorIndexes.Push(i);
            }
        }

        if(doorIndexes.Size() > 1)
        {
            int doorIndex = doorIndexes[random(0, doorIndexes.Size() - 1)];
            return  doorIndex;
        }
        else if(doorIndexes.Size() == 1)
        {
            return doorIndexes[0];
        }
        else
        {
            return -1;
        }
    }
}

Class DoorHelper : Actor
{
    Default
    {
        +SHOOTABLE
        +NOGRAVITY
        Health 999999999999;
    }
    States
    {
        Spawn:
            TNT1 A 1;
        Idle:
            TNT1 A 1
            {
                Health = 999999999999;
            }
            Loop;
    }
}